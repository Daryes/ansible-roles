---
# activate a specific selinux rule

- name: webserver nginx | selinux - retrieve global status
  shell: "{{ role_nginx_selinux.detect_cmd }}"
  register: task_selinux_global_status
  changed_when: false


- name: webserver nginx | selinux - update configuration
  block:
    - name: webserver nginx | selinux - retrieve rules status
      shell: "/usr/sbin/getsebool  {{ item }}"
      with_items: "{{ role_nginx_selinux.rules }}"
      register: task_selinux_rule_status
      changed_when: false

    # reuse the stdout to activate disabled rules
    # format is: "rule_name --> on" or "--> off"
    - name: webserver nginx | selinux - activate rules (can take some time)
      shell: "/usr/sbin/setsebool -P {{ var_rule_name }} on"
      vars:
        var_rule_name: "{{ item.split('-->') | first |trim }}"
      # The final object is .results[*].stdout <= need to use map to select the stdout property off all results[] items
      with_items: "{{ task_selinux_rule_status.results |map(attribute='stdout') |list }}"
      loop_control:
        label: "rule: {{ var_rule_name }}"
      when: >
        task_selinux_rule_status.results is defined
        and '--> off' in item

    - name: webserver nginx | selinux - open additionals ports
      seport:
        ports: "{{ item }}"
        proto: tcp
        setype: "{{ role_nginx_selinux.setype_http }}"
        state: present
      with_items: "{{ nginx_selinux_open_ports |flatten }}"
      loop_control:
        label: "port=>{{ item }}"

  # block ending
  when: task_selinux_global_status.stdout |regex_search( role_nginx_selinux.status_active_regex )

